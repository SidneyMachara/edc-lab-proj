# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-26 06:53
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aliquot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aliquot_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date and time aliquot created')),
                ('is_primary', models.BooleanField(default=False, editable=False)),
                ('count', models.IntegerField(editable=False, help_text='pos in sequence of aliquots from parent')),
                ('medium', models.CharField(choices=[('tube_any', 'Tube'), ('tube_edta', 'Tube EDTA'), ('swab', 'Swab'), ('dbs_card', 'DBS Card')], default='TUBE', max_length=25, verbose_name='Medium')),
                ('medium_count', models.IntegerField(default=1, editable=False, help_text='e.g. number of tubes')),
                ('original_measure', models.DecimalField(decimal_places=2, default='5.00', max_digits=10)),
                ('current_measure', models.DecimalField(decimal_places=2, default='5.00', max_digits=10)),
                ('measure_units', models.CharField(choices=[('mL', 'mL'), ('uL', 'uL'), ('spots', 'spots'), ('n/a', 'Not Applicable')], default='mL', max_length=25)),
                ('status', models.CharField(choices=[('available', 'available'), ('consumed', 'consumed')], default='available', max_length=25)),
                ('condition', models.CharField(choices=[('10', 'OK'), ('20', 'Inadequate volume for testing'), ('30', 'Clotted or haemolised'), ('40', 'Wrong tube type, unable to test'), ('50', 'Sample degradation has occured. Unsuitable for testing'), ('60', 'Expired tube'), ('70', 'Technical problem at lab, unable to test')], default='10', max_length=25)),
                ('comment', models.CharField(blank=True, max_length=50, null=True)),
                ('aliquot_identifier', models.CharField(max_length=25, unique=True)),
                ('parent_identifier', models.CharField(editable=False, max_length=25, verbose_name='Parent aliquot Identifier')),
                ('identifier_prefix', models.CharField(editable=False, max_length=50)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, null=True)),
                ('aliquot_type', models.CharField(max_length=25, verbose_name='Aliquot Type Name')),
                ('alpha_code', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator('^[A-Z]{2}$')], verbose_name='Aliquot Type Alpha Code')),
                ('numeric_code', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator('^[0-9]{2}$')], verbose_name='Aliquot Type Numeric Code')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('box_identifier', models.CharField(editable=False, max_length=25, unique=True)),
                ('name', models.CharField(blank=True, max_length=25, null=True)),
                ('box_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('category', models.CharField(choices=[('testing', 'Testing'), ('storage', 'Storage'), ('other', 'Other')], default='testing', max_length=25)),
                ('category_other', models.CharField(blank=True, max_length=25, null=True)),
                ('specimen_types', models.CharField(help_text='List of specimen types in this box. Use two-digit numeric codes separated by commas.', max_length=25)),
                ('status', models.CharField(choices=[('open', 'Open'), ('Damaged', 'Damaged')], default='open', max_length=15)),
                ('accept_box', models.BooleanField(default=False, help_text='Tick to accept/decline this box')),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Boxes',
                'ordering': ('-box_datetime',),
            },
        ),
        migrations.CreateModel(
            name='BoxItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('identifier', models.CharField(max_length=25)),
                ('comment', models.CharField(blank=True, max_length=25, null=True)),
                ('box', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.Box')),
            ],
        ),
        migrations.CreateModel(
            name='BoxType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='a unique name to describe this box type', max_length=25, unique=True)),
                ('across', models.IntegerField(help_text='number of cells in a row counting from left to right')),
                ('down', models.IntegerField(help_text='number of cells in a column counting from top to bottom')),
                ('total', models.IntegerField(help_text='total number of cells in this box type')),
                ('fill_order', models.CharField(choices=[('across', 'Across'), ('down', 'Down')], default='across', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Manifest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manifest_identifier', models.CharField(editable=False, max_length=25, unique=True, verbose_name='Manifest Identifier')),
                ('manifest_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('export_datetime', models.DateTimeField(blank=True, null=True)),
                ('export_references', models.TextField(blank=True, null=True)),
                ('description', models.TextField(help_text='If blank will be automatically generated', null=True, verbose_name='Description of contents')),
                ('status', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed')], default='open', max_length=15)),
                ('category', models.CharField(choices=[('testing', 'Testing'), ('storage', 'Storage'), ('other', 'Other')], default='testing', max_length=25)),
                ('category_other', models.CharField(blank=True, max_length=25, null=True)),
                ('site_code', models.CharField(max_length=25)),
                ('site_name', models.CharField(max_length=25)),
                ('comment', models.TextField(null=True, verbose_name='Comment')),
                ('shipped', models.BooleanField(default=False)),
                ('printed', models.BooleanField(default=False)),
                ('printed_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-manifest_identifier',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ManifestItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=25)),
                ('comment', models.CharField(blank=True, max_length=25, null=True)),
                ('manifest', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.Manifest')),
            ],
        ),
        migrations.AddField(
            model_name='box',
            name='box_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lab.BoxType'),
        ),
        migrations.AlterUniqueTogether(
            name='manifestitem',
            unique_together=set([('manifest', 'identifier')]),
        ),
    ]
